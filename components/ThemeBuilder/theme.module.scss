$breakpoints: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1440px,
);

@mixin breakpoint($size) {
    @if map-has-key($breakpoints, $size) {
        @media all and (max-width: map-get($breakpoints, $size)) {
            @content;
        }
    }
}

$input-base-size: calc(1rem * 0.875);

@mixin transtition($property: all) {
    transition: $property 0.3s cubic-bezier(0.25, 1, 0.5, 1);
}

@mixin copyText(
    $font-size: 1rem,
    $font-weight: 500,
    $content: attr(data-label)
) {
    span,
    &:before {
        font-size: $font-size;
        font-weight: $font-weight;
    }

    &:before {
        content: "";
        transform: translateY(100%);
        opacity: 0;
        transition:
            transform 0.25s ease,
            opacity 0.25s ease;
    }

    &:hover {
        &:before {
            content: $content;
            transform: translateY(0);
            opacity: 1;
            transition:
                transform 0.25s ease,
                opacity 0.25s ease;
        }

        span {
            display: none;
        }
    }
}

.main {
    display: flex;
    flex-direction: column;
    height: 100vh;
    width: 100vw;
}

.palette {
    &Controller {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;

        @include breakpoint(lg) {
            position: fixed;
            width: 100%;
        }

        &Container {
            display: flex;
            flex: 1;
            align-items: center;
            justify-content: center;
            gap: $input-base-size;

            @include breakpoint(lg) {
                button {
                    display: none;
                }
            }

            &:nth-child(1) {
                justify-content: flex-start;
            }

            &:nth-child(2) {
                justify-content: center;

                @include breakpoint(lg) {
                    display: none;
                }
            }

            &:nth-child(3) {
                justify-content: flex-end;

                @include breakpoint(lg) {
                    div:not(:last-of-type) {
                        display: none;
                    }
                }
            }
        }

        &Info {
            display: flex;
            align-items: center;
            padding: calc(#{$input-base-size} * 0.75) 1.25rem;
            width: max-content;
            border-radius: 0.25rem;
            cursor: pointer;
            @include copyText($input-base-size, 400);
        }
    }

    &Content {
        display: flex;
        flex: 1;
        align-items: center;
        padding: 1rem;
        gap: 2rem;

        @include breakpoint(xl) {
            gap: 1rem;
        }

        @include breakpoint(lg) {
            flex: none;
            padding: unset;
            gap: unset;
            overflow-x: scroll;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
        }
    }
}

.color {
    &Scheme {
        --toggle-size: calc(#{$input-base-size} * 5);
        --toggle-height: calc(#{$input-base-size} * 3);
        --toggle-padding: calc((#{$input-base-size} * 3) / 2);
        display: flex;
        align-items: center;
        height: var(--toggle-height);
        padding: calc(var(--toggle-padding) / 2);
        border-radius: calc(var(--toggle-height) / 2);

        label {
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            font-size: $input-base-size;
            padding: 0 calc(var(--toggle-padding) * 0.75);
            height: calc(var(--toggle-height) * 0.75);
            border-radius: calc(var(--toggle-padding) * 0.75);
            cursor: pointer;
        }

        input[type="radio"] {
            appearance: none;
        }
    }

    &Picker {
        position: relative;
        display: flex;
        align-items: center;

        label {
            display: flex;
            align-items: center;
            line-height: 1;
            padding: #{$input-base-size} 1.25rem;
            border-radius: calc((#{$input-base-size} * 3) / 2);
            gap: $input-base-size;
            cursor: pointer;
            transition: background-color 0.3s ease;

            span {
                display: flex;
                width: $input-base-size;
                height: $input-base-size;
                border-radius: 50%;
            }
        }

        @keyframes picker-animation {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        input[type="checkbox"] {
            position: absolute;
            visibility: hidden;

            &:checked ~ .colorPickerDropdown {
                display: flex;
                animation: picker-animation 0.8s cubic-bezier(0.16, 1, 0.3, 1);
            }
        }

        &Dropdown {
            display: none;
            position: absolute;
            top: calc(100% + #{$input-base-size});
            left: 50%;
            transform: translateX(-50%);
        }
    }
}

.toggle {
    --toggle-size: calc(#{$input-base-size} * 3);
    display: flex;
    align-items: center;

    input[type="checkbox"] {
        position: absolute;
        visibility: hidden;

        &:checked ~ label .toggleButton {
            transform: translateX(100%);
        }
    }

    &Icons {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex: 1;
        z-index: 2;
        padding: 0 calc(var(--toggle-size) / 8);

        svg {
            height: calc(var(--toggle-size) * 0.5);
            width: auto;
            color: currentColor;
            flex: none;
        }
    }

    &Button {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        height: calc(var(--toggle-size) * 0.75);
        width: calc(var(--toggle-size) * 0.75);
        border-radius: 50%;
        z-index: 1;
        @include transtition(transform);
    }

    label {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: calc(var(--toggle-size) * 2);
        height: var(--toggle-size);
        padding: calc(var(--toggle-size) / 4);
        user-select: none;
        border-radius: calc(var(--toggle-size) * 2);
        cursor: pointer;
    }
}

.colors {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    flex: 1;
    height: 100%;
    gap: 2rem;
    padding: 2rem 0;

    &Contrast {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    @include breakpoint(lg) {
        flex: none;
        scroll-snap-align: start;
        height: 100vh;
        width: 100vw;
        padding: calc((#{$input-base-size} * 3) + 2rem) 1rem 1rem;
    }

    &Button,
    &Shades {
        display: flex;
        height: -webkit-fill-available;
        width: 100%;
    }

    &Button {
        align-items: center;
        justify-content: center;
        border-radius: calc(50vh / 2);
        cursor: pointer;
        @include copyText(1.5rem, 500);

        @include breakpoint(xl) {
            span,
            &:before {
                font-size: 1.25rem;
            }
        }

        @include breakpoint(lg) {
            border-radius: calc(25vh / 2);
        }
    }

    &Shades {
        flex-direction: column-reverse;

        button {
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
            cursor: pointer;
            @include copyText(1rem, 400);
        }
    }

    p {
        font-size: 1.25rem;
        font-weight: 400;
    }
}

.settings {
    display: none;
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    flex-direction: row-reverse;
    align-items: flex-end;
    gap: 1rem;

    @include breakpoint(lg) {
        display: flex;
    }

    label {
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        height: 2rem;
        width: 2rem;
        cursor: pointer;

        svg {
            height: 1.5rem;
            width: auto;
            color: currentColor;
            flex: none;
        }
    }

    &Info {
        display: flex;
        align-items: center;
        justify-content: center;
        flex: 1;
        padding: calc(#{$input-base-size} * 0.75) 1.25rem;
        border-radius: 0.25rem;
        cursor: pointer;
        @include copyText($input-base-size, 400);
    }

    &Content {
        display: none;
        flex-direction: column;
        padding: 1rem;
        border-radius: 1rem;
        gap: 0.75rem;
        transform-origin: center;
    }

    @keyframes settings-animation {
        from {
            transform: translateY(100%);
        }
        to {
            transform: translateY(0);
        }
    }

    input[type="checkbox"] {
        position: absolute;
        visibility: hidden;

        &:checked ~ .settingsContent {
            display: flex;
            animation: settings-animation 0.3s cubic-bezier(0.16, 1, 0.3, 1);
        }
    }

    .select {
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-radius: calc($input-base-size / 4);
        overflow: hidden;

        svg {
            height: 1rem;
            width: auto;
            color: currentColor;
            flex: none;
            padding-right: $input-base-size;
        }

        select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            display: flex;
            flex: 1;
            border: none;
            outline: none;
            background-color: inherit;
            font-size: $input-base-size;
            padding: $input-base-size;
            cursor: pointer;
        }
    }
}
